@page "/Cards"
@using Station.Domain.Entities
@using Station.ServicesInterfaces
  @if (journeys == null)
{
    <span>Loading...</span>
}
        else{
 @foreach (var t in journeys) 
{
 <MudCard>
    <MudCardMedia Image="Imaga\vector-city-bus-stop-flat-poster.jp" Height="200" />
    <MudCardContent>
        <MudText Typo="Typo.h5">@t.Destination</MudText>
        <MudText Typo="Typo.body2">Date @t.Date </MudText>
        <MudText Typo="Typo.body2">price $@t.Price</MudText>
    </MudCardContent>
    <MudCardActions>
                @if(IsBooking(t.Id)==false)
                {
                <button type="button" class="btn btn-secondary" @onclick="@(()=>AddBooking(@normal,@t.Price,@t.Date,1,@t.Id))">normal <br />$@t.Price </button>
                <button type="button" class="btn btn-primary" @onclick="@(()=>AddBooking(@vip,@t.Price+50,@t.Date,2,@t.Id))">VIP <br />$@t.Price+50</button>
                }
                else 
                {
                    <MudText Color="Color.Success">you alredy booking</MudText>
                }
            </MudCardActions>
</MudCard> 
}
}

@code
{
    [Inject] IBookingRep bookingRep {get;set;}
    [Inject] IJourneyRep journeyRep {get;set;}
    private IEnumerable<Journey> journeys ;
    private char normal = 'n';
    private char vip = 'v';


    protected override async Task OnInitializedAsync()
    {
        await LoadJourneys();
    }
        private async Task LoadJourneys()
    {
        journeys = await journeyRep.Get();
    }
    private async Task RefreshList() 
    {
        await LoadJourneys();
    }
    private void AddBooking ( char type , float price , DateTime Date , int coustemrId , int journeyId)
    {
        bookingRep.AutoCreate(type , price , Date , coustemrId , journeyId);
        LoadJourneys();
    }
    private bool IsBooking(int Id)
    {
        return bookingRep.IsBooking(Id,3);
    }

}    
