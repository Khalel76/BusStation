@page "/Employees"


@using Station.Domain.Entities
@using Station.ServicesInterfaces
<br />

<h3>Employees List</h3>
<button class="btn btn-primary" @onclick="ShowAddModal">Add New Employee</button>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Salary</th>
           
            
        </tr>
    </thead>
    <tbody>
        @if (employees == null)
{
    <span>Loading...</span>
}
        else{
        @foreach (var emp in employees)
        {
            <tr>
                <td>@emp.Id</td>
                <td>@emp.Name</td>
                <td>@emp.Salary</td>
               
                <td>
                    
                    <button class="btn btn-secondary" @onclick="() => ShowEditModal(emp)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteEmployee(emp)">Delete</button>
                </td>
            </tr>
        }
        }
    </tbody>
</table>

<AddEmployee @ref="addEmployee" OnSave="RefreshList" />
@code {
    [Inject] IEmployeeRep EmployeeRep { get; set; }
    private IEnumerable<Employee> employees;
    private AddEmployee addEmployee;
   
    protected override async Task OnInitializedAsync()
    {
       await LoadEmployee();
    }

    private async Task LoadEmployee()
    {
        employees = await EmployeeRep.Get();
    }

    private async Task ShowAddModal()
    {
         await addEmployee.Show(new Employee());
    }

    private async Task ShowEditModal(Employee employee)
    {
        await addEmployee.Show(employee);
    }

    private async Task DeleteEmployee(Employee employee)
    {
        await EmployeeRep.Delete(employee);
        await LoadEmployee();
    }

    private async Task RefreshList()
    {
        await LoadEmployee();
    }
}
