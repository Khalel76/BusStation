@using Station.Domain.Entities
@using Station.ServicesInterfaces
@page "/Driver"
<br />

<h3>Drivers List</h3>
<button class="btn btn-primary" @onclick="ShowAddModal">Add New Driver</button>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Phone</th>
            <th>Vehical Type</th>
            <th>Vehical Plate</th>
        </tr>
    </thead>
    <tbody>
         @if (Drivers == null)
{
    <span>Loading...</span>
}
        else{
        @foreach (var dri in Drivers)
        {
            <tr>
                <td>@dri.Name</td>
                <td>@dri.Phone</td>
                <td>@GetvehicalType(dri.VehicalId)</td>
                <td>@GetvehicalPlate(dri.VehicalId)</td>
                <td>
                    
                    <button class="btn btn-secondary" @onclick="() => ShowEditModal(dri)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteDriver(dri)">Delete</button>
                </td>
            </tr>
        }
        }
    </tbody>
</table>

 
<AddDriver @ref="addDriver" OnSave="RefreshList"/> 

@code {
    [Inject] IVehicalRep vehicalRep { set; get;}
    [Inject] IDriverRep DriverRep { set; get; }
    private string Plate;

    private string Type ;
    private IEnumerable<Driver> Drivers;
    private AddDriver addDriver;
    
    private string GetvehicalType(int id)
    {
        Type= vehicalRep.GetType(id);
        return Type;
    }

    private string GetvehicalPlate(int id)
    {
        Plate = vehicalRep.GetPlate(id);
        return Plate;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDriver();
    }

    private async Task ShowAddModal()
    {
        await addDriver.Show(new Driver());
    }

    private async Task ShowEditModal(Driver driver)
    {
        await addDriver.Show(driver);
    }

    private async Task LoadDriver()
    {
        Drivers = await DriverRep.Get();
    }
    private async Task DeleteDriver(Driver driver)
    {
        await DriverRep.Delete(driver);
    }
    private async void RefreshList()
    {
        await LoadDriver();
    }
}
